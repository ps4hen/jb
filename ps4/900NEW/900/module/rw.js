import{Int as t,lohi_from_one as e}from"./int64.js";export class BufferView extends Uint8Array{constructor(...t){super(...t),this._dview=new DataView(this.buffer,this.byteOffset)}read16(t){return this._dview.getUint16(t,!0)}read32(t){return this._dview.getUint32(t,!0)}read64(e){return new t(this._dview.getUint32(e,!0),this._dview.getUint32(e+4,!0))}write16(t,e){this._dview.setUint16(t,e,!0)}write32(t,e){this._dview.setUint32(t,e,!0)}write64(t,r){let i=e(r);this._dview.setUint32(t,i[0],!0),this._dview.setUint32(t+4,i[1],!0)}}function read(t,e,r){let i=0;for(let n=0;n<r;n++)i+=t[e+n]<<8*n;return i>>>0}export function read16(t,e){return read(t,e,2)}export function read32(t,e){return read(t,e,4)}export function read64(e,r){return new t(read32(e,r),read32(e,r+4))}function write(t,e,r,i){for(let n=0;n<i;n++)t[e+n]=r>>>8*n&255}export function write16(t,e,r){write(t,e,r,2)}export function write32(t,e,r){write(t,e,r,4)}export function write64(e,r,i){if(!(i instanceof t))throw TypeError("write64 value must be an Int");let n=i.lo,f=i.hi;for(let o=0;o<4;o++)e[r+o]=n>>>8*o&255;for(let s=0;s<4;s++)e[r+4+s]=f>>>8*s&255}